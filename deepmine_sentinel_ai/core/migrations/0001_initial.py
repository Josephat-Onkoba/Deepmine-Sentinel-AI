# Generated by Django 5.2.4 on 2025-07-14 11:58

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Stope',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stope_name', models.CharField(help_text='Unique identifier for the stope', max_length=100, unique=True)),
                ('rqd', models.FloatField(help_text='Rock Quality Designation (0-100%)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('rock_type', models.CharField(choices=[('granite', 'Granite'), ('basalt', 'Basalt'), ('limestone', 'Limestone'), ('sandstone', 'Sandstone'), ('shale', 'Shale'), ('quartzite', 'Quartzite'), ('gneiss', 'Gneiss'), ('schist', 'Schist'), ('slate', 'Slate'), ('marble', 'Marble'), ('other', 'Other')], help_text='Primary rock type', max_length=50)),
                ('depth', models.FloatField(help_text='Depth below surface (meters)', validators=[django.core.validators.MinValueValidator(0)])),
                ('hr', models.FloatField(help_text='Hydraulic Radius (meters)', validators=[django.core.validators.MinValueValidator(0)])),
                ('dip', models.FloatField(help_text='Dip angle (degrees)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(90)])),
                ('direction', models.CharField(choices=[('N', 'North'), ('S', 'South'), ('E', 'East'), ('W', 'West'), ('NE', 'Northeast'), ('NW', 'Northwest'), ('SE', 'Southeast'), ('SW', 'Southwest')], help_text='Primary orientation', max_length=2)),
                ('undercut_width', models.FloatField(help_text='Undercut width (meters)', validators=[django.core.validators.MinValueValidator(0)])),
                ('mining_method', models.CharField(choices=[('open_stope', 'Open Stoping'), ('cut_fill', 'Cut and Fill'), ('sublevel_stoping', 'Sublevel Stoping'), ('block_caving', 'Block Caving'), ('room_pillar', 'Room and Pillar'), ('longwall', 'Longwall'), ('other', 'Other Method')], default='open_stope', help_text='Mining method used', max_length=50)),
                ('support_type', models.CharField(choices=[('none', 'No Support'), ('rock_bolts', 'Rock Bolts'), ('mesh', 'Wire Mesh'), ('shotcrete', 'Shotcrete'), ('timber', 'Timber Support'), ('cable_bolts', 'Cable Bolts'), ('steel_sets', 'Steel Sets'), ('combined', 'Combined Support')], default='none', help_text='Type of ground support installed', max_length=50)),
                ('support_density', models.FloatField(default=0.0, help_text='Support density (bolts/m² or equivalent)', validators=[django.core.validators.MinValueValidator(0)])),
                ('support_installed', models.BooleanField(default=False, help_text='Whether ground support is currently installed')),
                ('is_active', models.BooleanField(default=True, help_text='Whether stope is currently being mined')),
                ('excavation_started', models.DateTimeField(blank=True, help_text='When excavation began', null=True)),
                ('excavation_completed', models.DateTimeField(blank=True, help_text='When excavation was completed', null=True)),
                ('baseline_stability_score', models.FloatField(default=0.0, help_text='Baseline stability score based on geological factors (0.0-1.0)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this stope')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Mining Stope',
                'verbose_name_plural': 'Mining Stopes',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['stope_name'], name='core_stope_stope_n_65f456_idx'), models.Index(fields=['is_active'], name='core_stope_is_acti_acbdc1_idx'), models.Index(fields=['mining_method'], name='core_stope_mining__d7eb38_idx')],
            },
        ),
        migrations.CreateModel(
            name='OperationalEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('blasting', 'Blasting Operations'), ('heavy_equipment', 'Heavy Equipment Operations'), ('excavation', 'Excavation Activities'), ('drilling', 'Drilling Operations'), ('loading', 'Material Loading/Unloading'), ('transport', 'Heavy Transport'), ('water_exposure', 'Water Exposure/Flooding'), ('vibration_external', 'External Vibration Events'), ('support_installation', 'Ground Support Installation'), ('support_maintenance', 'Support System Maintenance'), ('inspection', 'Routine Inspection'), ('emergency', 'Emergency Response'), ('geological_event', 'Geological Event (rockfall, etc.)'), ('other', 'Other Operations')], help_text='Type of operational event', max_length=30)),
                ('timestamp', models.DateTimeField(help_text='Date and time when the event occurred')),
                ('severity', models.FloatField(choices=[(0.1, 'Minimal Impact'), (0.3, 'Low Impact'), (0.5, 'Moderate Impact'), (0.7, 'High Impact'), (0.9, 'Severe Impact'), (1.0, 'Critical Impact')], default=0.5, help_text='Severity level of the event (0.1-1.0)', validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(1.0)])),
                ('proximity_to_stope', models.FloatField(default=0.0, help_text='Distance from stope center (meters)', validators=[django.core.validators.MinValueValidator(0)])),
                ('duration_hours', models.FloatField(default=1.0, help_text='Duration of the event (hours)', validators=[django.core.validators.MinValueValidator(0.1)])),
                ('affected_area', models.FloatField(blank=True, help_text='Area affected by the event (square meters)', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('description', models.TextField(help_text='Detailed description of the operational event')),
                ('operator_crew', models.CharField(blank=True, help_text='Crew or operator responsible', max_length=100)),
                ('equipment_involved', models.CharField(blank=True, help_text='Equipment involved in the operation', max_length=200)),
                ('safety_measures', models.TextField(blank=True, help_text='Safety measures taken during the event')),
                ('immediate_impact_score', models.FloatField(blank=True, help_text='Calculated immediate impact on stability (0.0-1.0)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('decay_rate', models.FloatField(default=0.1, help_text='Rate at which impact decreases over time (per day)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('triggered_monitoring', models.BooleanField(default=False, help_text='Whether this event triggered additional monitoring')),
                ('event_metadata', models.JSONField(blank=True, default=dict, help_text='Additional event-specific data (coordinates, weather, etc.)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('recorded_by', models.CharField(help_text='Person who recorded this event', max_length=100)),
                ('verified', models.BooleanField(default=False, help_text='Whether this event has been verified by supervisor')),
                ('verified_by', models.CharField(blank=True, help_text='Supervisor who verified this event', max_length=100)),
                ('stope', models.ForeignKey(help_text='Stope affected by this operational event', on_delete=django.db.models.deletion.CASCADE, related_name='operational_events', to='core.stope')),
            ],
            options={
                'verbose_name': 'Operational Event',
                'verbose_name_plural': 'Operational Events',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='MonitoringData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sensor_type', models.CharField(choices=[('vibration', 'Vibration Sensor'), ('deformation', 'Deformation Sensor'), ('stress', 'Stress Sensor'), ('temperature', 'Temperature Sensor'), ('humidity', 'Humidity Sensor'), ('acoustic', 'Acoustic Emission'), ('strain', 'Strain Gauge'), ('displacement', 'Displacement Sensor')], help_text='Type of sensor/measurement', max_length=20)),
                ('timestamp', models.DateTimeField(help_text='When the measurement was taken')),
                ('value', models.FloatField(help_text='Measured value')),
                ('unit', models.CharField(help_text='Unit of measurement (mm/s, MPa, °C, etc.)', max_length=20)),
                ('sensor_id', models.CharField(blank=True, help_text='Physical sensor identifier', max_length=50)),
                ('is_anomaly', models.BooleanField(default=False, help_text='Flagged as anomalous reading')),
                ('confidence', models.FloatField(default=1.0, help_text='Confidence in this measurement (0.0-1.0)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('stope', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='monitoring_data', to='core.stope')),
            ],
            options={
                'verbose_name': 'Monitoring Data Point',
                'verbose_name_plural': 'Monitoring Data Points',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='ImpactScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_score', models.FloatField(default=0.0, help_text='Current impact score (0.0 = stable, 1.0 = critical)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('risk_level', models.CharField(choices=[('stable', 'STABLE - Normal Operations'), ('elevated', 'ELEVATED - Increased Monitoring'), ('high_risk', 'HIGH RISK - Restricted Access'), ('critical', 'CRITICAL - Immediate Action Required'), ('emergency', 'EMERGENCY - Evacuation Protocol')], default='stable', help_text='Current risk level classification', max_length=20)),
                ('baseline_component', models.FloatField(default=0.0, help_text='Component from geological baseline factors')),
                ('operational_component', models.FloatField(default=0.0, help_text='Component from recent operational events')),
                ('temporal_component', models.FloatField(default=0.0, help_text='Component from time-based factors and trends')),
                ('monitoring_component', models.FloatField(default=0.0, help_text='Component from sensor anomalies and monitoring data')),
                ('contributing_factors', models.JSONField(default=dict, help_text='Detailed breakdown of contributing factors')),
                ('last_updated', models.DateTimeField(auto_now=True, help_text='Last time the impact score was recalculated')),
                ('last_significant_change', models.DateTimeField(blank=True, help_text='Last time the risk level changed significantly', null=True)),
                ('last_calculation_method', models.CharField(default='manual', help_text='Method used for last calculation (manual, automatic, lstm)', max_length=50)),
                ('predicted_24h', models.FloatField(blank=True, help_text='LSTM predicted score for 24 hours ahead', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('predicted_48h', models.FloatField(blank=True, help_text='LSTM predicted score for 48 hours ahead', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('predicted_7d', models.FloatField(blank=True, help_text='LSTM predicted score for 7 days ahead', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('predicted_30d', models.FloatField(blank=True, help_text='LSTM predicted score for 30 days ahead', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('prediction_confidence', models.FloatField(blank=True, help_text='Confidence level of LSTM predictions (0.0-1.0)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('last_prediction_update', models.DateTimeField(blank=True, help_text='Last time LSTM predictions were updated', null=True)),
                ('alert_threshold_elevated', models.FloatField(default=0.25, help_text='Score threshold for elevated risk alert', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('alert_threshold_high', models.FloatField(default=0.5, help_text='Score threshold for high risk alert', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('alert_threshold_critical', models.FloatField(default=0.75, help_text='Score threshold for critical risk alert', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('stope', models.OneToOneField(help_text='Stope for which this impact score applies', on_delete=django.db.models.deletion.CASCADE, related_name='impact_score', to='core.stope')),
            ],
            options={
                'verbose_name': 'Impact Score',
                'verbose_name_plural': 'Impact Scores',
            },
        ),
        migrations.CreateModel(
            name='ImpactHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('previous_score', models.FloatField(help_text='Impact score before this change')),
                ('new_score', models.FloatField(help_text='Impact score after this change')),
                ('score_change', models.FloatField(help_text='Change in impact score (positive = increase, negative = decrease)')),
                ('previous_risk_level', models.CharField(help_text='Risk level before this change', max_length=20)),
                ('new_risk_level', models.CharField(help_text='Risk level after this change', max_length=20)),
                ('change_type', models.CharField(choices=[('event_impact', 'Operational Event Impact'), ('time_decay', 'Natural Time Decay'), ('manual_adjustment', 'Manual Score Adjustment'), ('support_improvement', 'Ground Support Enhancement'), ('maintenance_activity', 'Maintenance Activity'), ('monitoring_anomaly', 'Monitoring Anomaly Detected'), ('system_recalculation', 'Automated System Recalculation'), ('lstm_prediction', 'LSTM Model Update'), ('threshold_adjustment', 'Alert Threshold Change'), ('emergency_override', 'Emergency Manual Override')], help_text='Type of change that caused this impact score update', max_length=30)),
                ('change_magnitude', models.CharField(choices=[('minimal', 'Minimal Change (<0.05)'), ('minor', 'Minor Change (0.05-0.15)'), ('moderate', 'Moderate Change (0.15-0.30)'), ('significant', 'Significant Change (0.30-0.50)'), ('major', 'Major Change (>0.50)')], default='minimal', help_text='Magnitude classification of the change', max_length=20)),
                ('change_reason', models.TextField(help_text='Detailed explanation of what caused this change')),
                ('component_changes', models.JSONField(default=dict, help_text='Breakdown of how each score component changed')),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='When this change occurred')),
                ('calculation_method', models.CharField(choices=[('automatic', 'Automatic System Calculation'), ('manual', 'Manual Calculation'), ('lstm', 'LSTM Model Prediction'), ('hybrid', 'Hybrid Automatic/Manual')], default='automatic', help_text='Method used to calculate this change', max_length=50)),
                ('calculated_by', models.CharField(default='system', help_text='What/who calculated this change', max_length=100)),
                ('confidence_level', models.FloatField(default=1.0, help_text='Confidence in this calculation (0.0-1.0)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('external_factors', models.JSONField(blank=True, default=dict, help_text='External factors that may have influenced this change')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this change')),
                ('related_monitoring_data', models.ManyToManyField(blank=True, help_text='Monitoring data points that contributed to this change', related_name='score_impacts', to='core.monitoringdata')),
                ('related_operational_event', models.ForeignKey(blank=True, help_text='Operational event that triggered this change (if applicable)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='score_impacts', to='core.operationalevent')),
                ('stope', models.ForeignKey(help_text='Stope for which this history record applies', on_delete=django.db.models.deletion.CASCADE, related_name='impact_history', to='core.stope')),
            ],
            options={
                'verbose_name': 'Impact History Record',
                'verbose_name_plural': 'Impact History Records',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.AddIndex(
            model_name='operationalevent',
            index=models.Index(fields=['stope', 'timestamp'], name='core_operat_stope_i_654329_idx'),
        ),
        migrations.AddIndex(
            model_name='operationalevent',
            index=models.Index(fields=['event_type', 'timestamp'], name='core_operat_event_t_ae1846_idx'),
        ),
        migrations.AddIndex(
            model_name='operationalevent',
            index=models.Index(fields=['timestamp'], name='core_operat_timesta_24c661_idx'),
        ),
        migrations.AddIndex(
            model_name='operationalevent',
            index=models.Index(fields=['verified'], name='core_operat_verifie_b30d4e_idx'),
        ),
        migrations.AddIndex(
            model_name='operationalevent',
            index=models.Index(fields=['stope', 'event_type'], name='core_operat_stope_i_ddec32_idx'),
        ),
        migrations.AddIndex(
            model_name='monitoringdata',
            index=models.Index(fields=['stope', 'timestamp'], name='core_monito_stope_i_32b896_idx'),
        ),
        migrations.AddIndex(
            model_name='monitoringdata',
            index=models.Index(fields=['sensor_type', 'timestamp'], name='core_monito_sensor__655c17_idx'),
        ),
        migrations.AddIndex(
            model_name='monitoringdata',
            index=models.Index(fields=['timestamp'], name='core_monito_timesta_959172_idx'),
        ),
        migrations.AddIndex(
            model_name='monitoringdata',
            index=models.Index(fields=['is_anomaly'], name='core_monito_is_anom_1f4df5_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='monitoringdata',
            unique_together={('stope', 'sensor_type', 'timestamp', 'sensor_id')},
        ),
        migrations.AddIndex(
            model_name='impactscore',
            index=models.Index(fields=['risk_level'], name='core_impact_risk_le_e86c25_idx'),
        ),
        migrations.AddIndex(
            model_name='impactscore',
            index=models.Index(fields=['current_score'], name='core_impact_current_917455_idx'),
        ),
        migrations.AddIndex(
            model_name='impactscore',
            index=models.Index(fields=['last_updated'], name='core_impact_last_up_cb258b_idx'),
        ),
        migrations.AddIndex(
            model_name='impacthistory',
            index=models.Index(fields=['stope', 'timestamp'], name='core_impact_stope_i_8b2bf6_idx'),
        ),
        migrations.AddIndex(
            model_name='impacthistory',
            index=models.Index(fields=['change_type', 'timestamp'], name='core_impact_change__a2b368_idx'),
        ),
        migrations.AddIndex(
            model_name='impacthistory',
            index=models.Index(fields=['timestamp'], name='core_impact_timesta_bbe387_idx'),
        ),
        migrations.AddIndex(
            model_name='impacthistory',
            index=models.Index(fields=['stope', 'change_type'], name='core_impact_stope_i_8282b1_idx'),
        ),
        migrations.AddIndex(
            model_name='impacthistory',
            index=models.Index(fields=['change_magnitude'], name='core_impact_change__e762c4_idx'),
        ),
    ]
